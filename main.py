"""
Sistema de Navega√ß√£o Aut√¥noma - Interface Principal
===================================================

Este √© o ponto de entrada principal do Sistema de Navega√ß√£o Aut√¥noma,
um sistema avan√ßado para navega√ß√£o e resgate em ambientes complexos.
O sistema oferece uma interface interativa para sele√ß√£o de mapas
e execu√ß√£o de miss√µes de navega√ß√£o aut√¥noma.

Funcionalidades principais:
- Interface de usu√°rio interativa
- Sele√ß√£o de mapas de ambiente
- Execu√ß√£o de miss√µes de navega√ß√£o
- Visualiza√ß√£o de resultados
- Sistema de logging integrado

Autor: Sistema de Navega√ß√£o Inteligente v2.0
Data: 2024
"""

import os
import sys
from typing import List, Optional

# Adiciona o diret√≥rio src ao path para importa√ß√µes
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.simulador_labirinto import AmbienteNavegacao
from src.robo_resgate import AgenteNavegacaoInteligente
from src.logger import SistemaLog

def exibir_titulo_sistema():
    """
    Exibe o t√≠tulo e informa√ß√µes do sistema.
    """
    print("=" * 80)
    print("üöÄ SISTEMA DE NAVEGA√á√ÉO AUT√îNOMA v2.0 üöÄ")
    print("=" * 80)
    print("Sistema Avan√ßado de Navega√ß√£o e Resgate em Ambientes Complexos")
    print("Desenvolvido com algoritmos de intelig√™ncia artificial")
    print("=" * 80)
    print()

def listar_mapas_disponiveis() -> List[str]:
    """
    Lista todos os mapas dispon√≠veis no diret√≥rio de mapas.
    
    Returns:
        List[str]: Lista de nomes de arquivos de mapa
    """
    diretorio_mapas = "mapas"
    
    if not os.path.exists(diretorio_mapas):
        print(f"‚ùå Diret√≥rio de mapas n√£o encontrado: {diretorio_mapas}")
        return []
    
    arquivos_mapas = []
    for arquivo in os.listdir(diretorio_mapas):
        if arquivo.endswith('.txt'):
            arquivos_mapas.append(arquivo)
    
    arquivos_mapas.sort()  # Ordena alfabeticamente
    
    if not arquivos_mapas:
        print(f"‚ùå Nenhum mapa encontrado no diret√≥rio: {diretorio_mapas}")
        return []
    
    return arquivos_mapas

def exibir_menu_principal():
    """
    Exibe o menu principal do sistema.
    """
    print("üìã MENU PRINCIPAL")
    print("-" * 40)
    print("1. Executar Miss√£o de Navega√ß√£o")
    print("2. Visualizar Mapas Dispon√≠veis")
    print("3. Informa√ß√µes do Sistema")
    print("4. Sair")
    print("-" * 40)

def exibir_informacoes_sistema():
    """
    Exibe informa√ß√µes detalhadas sobre o sistema.
    """
    print("\nüîç INFORMA√á√ïES DO SISTEMA")
    print("=" * 50)
    print("Vers√£o: 2.0")
    print("Autor: Sistema de Navega√ß√£o Inteligente")
    print("Data: 2024")
    print()
    print("üìä CARACTER√çSTICAS:")
    print("‚Ä¢ Algoritmo de busca A* para planejamento de caminho")
    print("‚Ä¢ Explora√ß√£o baseada em sensores de proximidade")
    print("‚Ä¢ Sistema de valida√ß√£o e monitoramento de seguran√ßa")
    print("‚Ä¢ Gera√ß√£o de anima√ß√µes GIF do processo")
    print("‚Ä¢ Sistema de logging abrangente")
    print("‚Ä¢ Interface interativa amig√°vel")
    print()
    print("üéØ FUNCIONALIDADES:")
    print("‚Ä¢ Navega√ß√£o aut√¥noma em ambientes complexos")
    print("‚Ä¢ Localiza√ß√£o e coleta de objetos")
    print("‚Ä¢ Retorno seguro √† sa√≠da")
    print("‚Ä¢ Valida√ß√µes de integridade do sistema")
    print("‚Ä¢ Relat√≥rios detalhados de miss√£o")
    print("=" * 50)

def selecionar_mapa_interativo() -> Optional[str]:
    """
    Permite ao usu√°rio selecionar um mapa de forma interativa.
    
    Returns:
        Optional[str]: Caminho do mapa selecionado ou None se cancelado
    """
    mapas_disponiveis = listar_mapas_disponiveis()
    
    if not mapas_disponiveis:
        return None
    
    print("\nüó∫Ô∏è  MAPAS DISPON√çVEIS:")
    print("-" * 40)
    
    for i, mapa in enumerate(mapas_disponiveis, 1):
        print(f"{i}. {mapa}")
    
    print(f"{len(mapas_disponiveis) + 1}. Voltar ao menu principal")
    print("-" * 40)
    
    while True:
        try:
            escolha = input("Digite o n√∫mero do mapa desejado: ").strip()
            
            if not escolha:
                print("‚ùå Por favor, digite um n√∫mero v√°lido.")
                continue
            
            numero_escolha = int(escolha)
            
            if 1 <= numero_escolha <= len(mapas_disponiveis):
                mapa_selecionado = mapas_disponiveis[numero_escolha - 1]
                caminho_mapa = os.path.join("mapas", mapa_selecionado)
                print(f"‚úÖ Mapa selecionado: {mapa_selecionado}")
                return caminho_mapa
            
            elif numero_escolha == len(mapas_disponiveis) + 1:
                return None
            
            else:
                print(f"‚ùå N√∫mero inv√°lido. Digite um n√∫mero entre 1 e {len(mapas_disponiveis) + 1}.")
        
        except ValueError:
            print("‚ùå Por favor, digite um n√∫mero v√°lido.")
        except KeyboardInterrupt:
            print("\n\nüëã Opera√ß√£o cancelada pelo usu√°rio.")
            return None

def executar_missao_navegacao(caminho_mapa: str):
    """
    Executa uma miss√£o completa de navega√ß√£o.
    
    Args:
        caminho_mapa (str): Caminho para o arquivo do mapa
    """
    try:
        print(f"\nüöÄ INICIANDO MISS√ÉO DE NAVEGA√á√ÉO")
        print("=" * 50)
        print(f"Mapa: {os.path.basename(caminho_mapa)}")
        print("=" * 50)
        
        # Inicializa componentes do sistema
        print("üîß Inicializando componentes do sistema...")
        
        # Cria ambiente de navega√ß√£o
        ambiente = AmbienteNavegacao(caminho_mapa)
        print("‚úÖ Ambiente de navega√ß√£o inicializado")
        
        # Cria sistema de logging
        nome_mapa = os.path.basename(caminho_mapa).split('.')[0]
        sistema_log = SistemaLog(f"missao_{nome_mapa}")
        print("‚úÖ Sistema de logging inicializado")
        
        # Cria agente de navega√ß√£o
        agente = AgenteNavegacaoInteligente(ambiente, sistema_log)
        print("‚úÖ Agente de navega√ß√£o inicializado")
        
        print("\nüéØ Executando miss√£o...")
        print("-" * 30)
        
        # Executa a miss√£o
        agente.executar_missao_resgate()
        
        print("\nüéâ MISS√ÉO CONCLU√çDA COM SUCESSO!")
        print("=" * 50)
        
        # Exibe estat√≠sticas finais
        estatisticas = sistema_log.obter_estatisticas_sessao()
        if estatisticas:
            print("üìä ESTAT√çSTICAS DA MISS√ÉO:")
            print(f"‚Ä¢ Total de registros: {estatisticas.get('total_registros', 0)}")
            print(f"‚Ä¢ Comandos executados: {estatisticas.get('comandos_executados', 0)}")
            print(f"‚Ä¢ Erros registrados: {estatisticas.get('erros_registrados', 0)}")
            print(f"‚Ä¢ Alarmes registrados: {estatisticas.get('alarmes_registrados', 0)}")
            print(f"‚Ä¢ Arquivo de log: {estatisticas.get('arquivo_log', 'N/A')}")
        
        print("=" * 50)
        
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE A EXECU√á√ÉO DA MISS√ÉO:")
        print(f"Erro: {str(e)}")
        print("\nüîç Verifique o arquivo de log para mais detalhes.")
    
    finally:
        print("\n‚è∏Ô∏è  Pressione Enter para continuar...")
        try:
            input()
        except (EOFError, KeyboardInterrupt):
            pass

def executar_modo_demonstracao():
    """
    Executa uma demonstra√ß√£o autom√°tica do sistema.
    """
    print("\nüé¨ MODO DEMONSTRA√á√ÉO")
    print("=" * 40)
    print("Executando demonstra√ß√£o autom√°tica...")
    
    # Lista mapas dispon√≠veis
    mapas = listar_mapas_disponiveis()
    
    if not mapas:
        print("‚ùå Nenhum mapa dispon√≠vel para demonstra√ß√£o.")
        return
    
    # Seleciona o primeiro mapa dispon√≠vel
    mapa_demo = mapas[0]
    caminho_mapa = os.path.join("mapas", mapa_demo)
    
    print(f"üìã Mapa selecionado para demonstra√ß√£o: {mapa_demo}")
    
    # Executa a miss√£o
    executar_missao_navegacao(caminho_mapa)

def main():
    """
    Fun√ß√£o principal do sistema.
    """
    try:
        # Exibe t√≠tulo do sistema
        exibir_titulo_sistema()
        
        # Loop principal do menu
        while True:
            exibir_menu_principal()
            
            try:
                escolha = input("Digite sua escolha (1-4): ").strip()
                
                if escolha == "1":
                    # Executar miss√£o de navega√ß√£o
                    mapa_selecionado = selecionar_mapa_interativo()
                    if mapa_selecionado:
                        executar_missao_navegacao(mapa_selecionado)
                
                elif escolha == "2":
                    # Visualizar mapas dispon√≠veis
                    print("\nüó∫Ô∏è  MAPAS DISPON√çVEIS:")
                    print("-" * 40)
                    mapas = listar_mapas_disponiveis()
                    if mapas:
                        for i, mapa in enumerate(mapas, 1):
                            print(f"{i}. {mapa}")
                    else:
                        print("‚ùå Nenhum mapa encontrado.")
                    print("-" * 40)
                    input("Pressione Enter para continuar...")
                
                elif escolha == "3":
                    # Informa√ß√µes do sistema
                    exibir_informacoes_sistema()
                    input("Pressione Enter para continuar...")
                
                elif escolha == "4":
                    # Sair do sistema
                    print("\nüëã Obrigado por usar o Sistema de Navega√ß√£o Aut√¥noma!")
                    print("Sistema desenvolvido com tecnologia de ponta.")
                    break
                
                else:
                    print("‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero entre 1 e 4.")
            
            except KeyboardInterrupt:
                print("\n\nüëã Sistema interrompido pelo usu√°rio.")
                break
            except EOFError:
                # Modo n√£o-interativo (para testes automatizados)
                print("\nü§ñ Modo n√£o-interativo detectado.")
                executar_modo_demonstracao()
                break
    
    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO NO SISTEMA:")
        print(f"Erro: {str(e)}")
        print("\nüîß Verifique a configura√ß√£o do sistema e tente novamente.")

if __name__ == "__main__":
    main()